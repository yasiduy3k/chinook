@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.IServices
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>
<!-- ---------- Search filter ---------------------------- -->
    <p>
    Artist: <input type="text" name="SearchString" @bind="SearchFilter" />
    <button class="btn btn-success" @onclick="@(() => GetArtists())" @onclick:preventDefault>Filter</button>
    <button class="btn btn-success" @onclick="@(() => ClearSearch())" @onclick:preventDefault>Clear</button>
    </p>


@if (Artists == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    //[Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    // -------------- Injecting the services --------------------
    [Inject] IArtistService ArtistService { get; set; }
    [Inject] IAlbumService AlbumService { get; set; }

    private string SearchFilter;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        GetArtists();
    }
    /// <summary>
    /// Retrieving the artists
    /// </summary>
    public async void GetArtists()
    {
        Artists = await ArtistService.GetArtists(SearchFilter);
    }

    /// <summary>
    /// Clear the search box and load default
    /// </summary>
    public async void ClearSearch()
    {
        SearchFilter = string.Empty;
        Artists = await ArtistService.GetArtists(SearchFilter);
    }
    // --------- Did not use -----------------
    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        return await AlbumService.GetAlbumsForArtist(artistId);
    }
}
