@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using Chinook.IServices;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                            //-----------------  bi-star-filled icon not working -------------------
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            @*---- Using @bind attribute to track select value instead of onchange---------*@
            <select class="form-control" id="ExistingPlaylist" @bind="SelectedPlaylistId">
                @* Empty option to be displayed till a valid selection is done *@
                @if (SelectedPlaylistId == -1)
                {
                    <option value="-1"></option>
                }
                @foreach (var playlist in SelectedPlaylists)
                {
                    <option value="@playlist.PlaylistId">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <!-- ------ Binding the text field to PlayListName ----------- -->
            <input type="text" id="NewPlaylist" @bind:event="oninput" class="form-control" @bind="PlaylistName" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        @if (DisableByDropDown && DisableByText)
        {
            <button class="btn btn-success" @onclick="AddTrackToPlaylist" disabled>Save</button>
        }
        else
        {
            <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
        }

    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    //[Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    //Injecting the services to Razor page
    [Inject] IArtistService ArtistService { get; set; }
    [Inject] ITrackService TrackService { get; set; }
    [Inject] IPlaylistService PlaylistService { get; set; }
    [Inject] IRefreshNavService RefreshNavService { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    //private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private List<Models.Playlist> SelectedPlaylists;
    private string InfoMessage;
    private string CurrentUserId;

    private bool DisableByText, DisableByDropDown;
    private long _selecedPlaylistId;
    public long SelectedPlaylistId
    {
        get { return _selecedPlaylistId; }
        set
        {
            _selecedPlaylistId = value;
            DisableByDropDown = _selecedPlaylistId < 0 ? true : false;
        }
    }
    private string _playlistName;
    private string PlaylistName
    {
        get { return _playlistName; }
        set
        {
            _playlistName = value;
            DisableByText = _playlistName?.Length < 1 ? true : false;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        SelectedPlaylistId = -1;
        DisableByDropDown = true;
        DisableByText = true;
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        //----------- Load values from the backend --------------
        Artist = await ArtistService.GetArtistById(ArtistId);
        Tracks = await TrackService.GetPlaylistTracks(ArtistId, CurrentUserId);
        SelectedPlaylists = await PlaylistService.GetPlaylistsOfUser(CurrentUserId);

        /* //------------ Set the first element's id of the list as the default playlist -------------
        if (SelectedPlaylists.Any())
        {
            SelectedPlaylistId = SelectedPlaylists
            .First()
            .PlaylistId;
        }*/
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    /// <summary>
    /// Add to my favourite playlist
    /// </summary>
    /// <param name="trackId"></param>
    private async void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        // TODO: add track to Favorites playlist
        // ----- Add to favourite list and reload tracks -------
        var message = await TrackService.AddToMyFavourite(trackId, CurrentUserId);
        Tracks = await TrackService.GetPlaylistTracks(ArtistId, CurrentUserId);
        InfoMessage = $"Track {track?.ArtistName} - {track?.AlbumTitle} - {track?.TrackName} {message}";
        //Triger call back event to update nav menu
        RefreshNavService.CallRequestRefresh();
    }
    /// <summary>
    /// Remove from my favourite playlist
    /// </summary>
    /// <param name="trackId"></param>
    private async void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        // TODO: remove track from Favorites playlist
        // ----- Remove from favourite list and reload tracks -------
        var message = await TrackService.RemoveFromMyFavourite(trackId, CurrentUserId);
        Tracks = await TrackService.GetPlaylistTracks(ArtistId, CurrentUserId);
        InfoMessage = $"Track {track?.ArtistName} - {track?.AlbumTitle} - {track?.TrackName} {message}";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        if (Tracks.Any())
        {
            SelectedTrack = Tracks.First(t => t.TrackId == trackId);
        }
        SelectedPlaylistId = -1;
        PlaylistName = string.Empty;
        PlaylistDialog.Open();
    }

    /// <summary>
    /// Add selected track to existing or new playlist
    /// </summary>
    private async void AddTrackToPlaylist()
    {
        // TODO

        CloseInfoMessage();
        // ----- Add tracks to playlist and reload the selected playlists -------
        var message = await PlaylistService.AddTrackToPlayList(SelectedTrack.TrackId, SelectedPlaylistId, PlaylistName, CurrentUserId);
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} {message}.";
        SelectedPlaylists = await PlaylistService.GetPlaylistsOfUser(CurrentUserId);
        PlaylistName = string.Empty;
        PlaylistDialog.Close();
        SelectedPlaylistId = -1;
        //Triger call back event to update nav menu
        RefreshNavService.CallRequestRefresh();
    }

    /// <summary>
    /// Method for capturing playlist dropdown change
    /// </summary>
    /// <param name="e"></param>
    /* private void OnPlayListChanghe(ChangeEventArgs e)
    {
        // ------ To capture playlist id change from the dropdown ------
        //long playlistId = 0;
        long.TryParse(e?.Value?.ToString(), out long playlistId);
        SelectedPlaylistId = playlistId;
        DisableByDropDown = !SelectedPlaylists.Any(p => p.PlaylistId == playlistId);
    }*/

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}
