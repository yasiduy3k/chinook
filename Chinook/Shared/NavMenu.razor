@using Chinook.ClientModels
@using Chinook.Models
@using Chinook.IServices;
@using System.Security.Claims

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@navMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        <div class="nav-item px-3" style=" height: 500px; overflow-y: auto;">
            <hr style="color:white" />
            <p style="color:#d7d7d7">My Playlists</p>
            <hr style="color:white" />          

            @foreach (var playlist in selectedPlaylists)
            {
                var link = "playlist/" + @playlist.PlaylistId;
                <NavLink class="nav-link" href="@link">
                    <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>@playlist.Name
                </NavLink>
            }
        </div>

    </nav>
</div>


@code {
    [Inject] IPlaylistService playlistService { get; set; }
    [Inject] IRefreshNavService refreshNavService { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private List<PlaylistCM> selectedPlaylists;

    private string currentUserId;
    private bool collapseNavMenu = true;

    private string? navMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        currentUserId = await GetUserId();
        //----------- Load values from the backend --------------
        selectedPlaylists = await playlistService.GetPlaylistsOfUser(currentUserId);

        // Un subscrib from event
        refreshNavService.RefreshRequested -= RefreshAndRenderNavMenu;
        // subscribe to event
        refreshNavService.RefreshRequested += RefreshAndRenderNavMenu;
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    /// <summary>
    /// Event used to refresh navigation panel to load playlists.
    /// </summary>
    private async void RefreshAndRenderNavMenu()
    {
        //----------- Load values from the backend --------------
        selectedPlaylists = await playlistService.GetPlaylistsOfUser(currentUserId);
        await InvokeAsync(StateHasChanged);
    }
}
